<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateFile_PathSelectTitle" xml:space="preserve">
    <value>Create New Modifidable Resource File</value>
  </data>
  <data name="FileExtsOnlyBinaryClasses" xml:space="preserve">
    <value>.NET binary .resources files|*.resources|Custom Binary Resource file|*.resb</value>
  </data>
  <data name="FileExtsStrClass" xml:space="preserve">
    <value>C# Source Files|*.cs|Visual Basic .NET Source Files|*.vb</value>
  </data>
  <data name="FileExtsWithBinaryClasses" xml:space="preserve">
    <value>Custom JSON Resource files|*.resj|Custom XML Resource files|*.resxx|Custom ResX Resource files|*.rescx|ResX Resource files|*.resx|Custom MS-INI Resource files|*.resi|Human Readable Format Resource files|*.resh|.NET binary .resources files|*.resources|Custom Binary Resources Files|*.resb</value>
  </data>
  <data name="FileExtsWithBinaryClassesOpenOnly" xml:space="preserve">
    <value>Custom JSON Resource files|*.resj|Custom XML Resource files|*.resxx|Custom ResX Resource files|*.rescx|ResX Resource files|*.resx|Custom MS-INI Resource files|*.resi|Human Readable Format Resource files|*.resh|.NET binary .resources files (Read-Only)|*.resources|Custom Binary Resources Files (Read-Only)|*.resb</value>
  </data>
  <data name="FileExtsWithoutBinaryClasses" xml:space="preserve">
    <value>Custom JSON Resource files|*.resj|Custom XML Resource files|*.resxx|Custom ResX Resource files|*.rescx|ResX Resource files|*.resx|Custom MS-INI Resource files|*.resi|Human Readable Format Resource files|*.resh</value>
  </data>
  <data name="FinalizeResFileMsg" xml:space="preserve">
    <value>Are you sure that you want to finalize the current resource file?
Finalizing a resource file means that the resources are written to a binary format
readable by production apps. After doing this and if you lose all the resource files 
that have these contents you cannot modify or copy to other format the produced resource file.
Are you sure that you want to continue?</value>
  </data>
  <data name="FinalizeResourceFile_PathSelectTitle" xml:space="preserve">
    <value>Finalize the current resources...</value>
  </data>
  <data name="PathToFileNotSpecified" xml:space="preserve">
    <value>You have not specified a path yet.</value>
  </data>
  <data name="SavePath_RequiresNotEmpty" xml:space="preserve">
    <value>The resource file save path must not be empty.</value>
  </data>
  <data name="StrClassManifestResourceName_RequiresNotEmpty" xml:space="preserve">
    <value>The Strongly-Typed resource class underlying stream name must not be empty.</value>
  </data>
  <data name="StrClassName_RequiresNotEmpty" xml:space="preserve">
    <value>The Strongly-Typed resource class .NET name must not be empty.</value>
  </data>
  <data name="StrClassSavePath_RequiresNotEmpty" xml:space="preserve">
    <value>The Strongly-Typed resource class save path must not be empty.
Please provide a valid save path and retry.</value>
  </data>
  <data name="StrClassSupportedForBinaryClasses" xml:space="preserve">
    <value>Only the .NET , the Custom Binary and JSON file types may
be used to generate a strongly-typed resource class.
Please select one of these in order to generate such a class.</value>
  </data>
</root>