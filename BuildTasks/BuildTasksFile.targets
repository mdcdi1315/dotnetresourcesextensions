<?xml version="1.0" encoding="utf-8"?>
<!--
	ABSTRACT: This file is preloaded for importing BuildTasks into your project during the NuGet package load.
	It also provides to the MSBuild proper interface for creating resources.
-->
<Project ToolsVersion="Current" InitialTargets="I_DotNetResourcesExtensions_CheckTF;I_DotNetResourcesExtensions_BuildTasks_Resolve">

	<PropertyGroup>
		<!-- Determine the BuildTasks assembly to use -->
		<DNRS_TFIdentifier Condition="'$(TargetFramework.Contains(`net7.0`))' == 'true'">netstandard2.0</DNRS_TFIdentifier>
		<DNRS_TFIdentifier Condition="'$(TargetFramework.Contains(`net8.0`))' == 'true'">netstandard2.0</DNRS_TFIdentifier>
		<DNRS_TFIdentifier Condition="'$(TargetFramework.Contains(`net9.0`))' == 'true'">netstandard2.0</DNRS_TFIdentifier>
		<DNRS_TFIdentifier Condition="'$(TargetFramework.Contains(`netstandard`))' == 'true'">netstandard2.0</DNRS_TFIdentifier>
		<DNRS_TFIdentifier Condition="'$(TargetFramework.StartsWith(`net4`))' == 'true'">net472</DNRS_TFIdentifier>
		<!-- This will load the net472 one if: 1. This is a .NET Core project , 2. The project is a Windows project and 3. We are building for desktop MSBuild. -->
		<DNRS_TFIdentifier Condition="'$(DNRS_TFIdentifier)' == 'netstandard2.0' AND '$(TargetFramework.Contains(`windows`))' == 'true' AND '$(MSBuildRuntimeType)' != 'Core'">net472</DNRS_TFIdentifier>
		<!-- Ultimately fallback to net472 if no target framework can be computed -->
		<DNRS_TFIdentifier Condition="'$(DNRS_TFIdentifier)' == ''">net472</DNRS_TFIdentifier>
		<!-- Compute final build path -->
		<DNRSPath>$(MSBuildThisFileDirectory)../tools/$(DNRS_TFIdentifier)/DotNetResourcesExtensions.BuildTasks.dll</DNRSPath>
		<!-- [PUBLIC PROPERTY] Enable or disable the dependencies resolve mechanism. This is used by BuildTasks because NuGet cannot provide them to it at run-time. -->
		<DotNetResourcesExtensions_EnableDepResolve>True</DotNetResourcesExtensions_EnableDepResolve>
		<!-- [PUBLIC PROPERTY] Returns the currently used BuildTasks assembly path. Prefer to use this property if you want to do programmatical operations that involve this assembly. -->
		<DotNetResourcesExtensionsBuildTasksPath>$(DNRSPath)</DotNetResourcesExtensionsBuildTasksPath>
	</PropertyGroup>

	<ItemDefinitionGroup>
		<!-- [PUBLIC BUILD ITEM] Specifies a resource file that is leveraged by DotNetResourcesExtensions. -->
		<!-- Then , it is embedded in a resource file specified by OutputResourceFileDef definition. -->
		<GeneratableResource>
			<!-- Generate a strongly-typed resource class. -->
			<GenerateStrClass>False</GenerateStrClass>
			<!-- The class language for this file to be generated in. -->
			<StrClassLanguage>C#</StrClassLanguage>
			<!-- The strongly-typed class name. Must be the full namespace name split with dots , such as Generated.Product.Resources. -->
			<StrClassName></StrClassName>
			<!-- The manifest stream to load that references the class. This is required for strongly-typed resource class generation. -->
			<StrClassManifestName></StrClassManifestName>
			<!-- The source file output path to place it into. This is a required property. -->
			<StrOutPath></StrOutPath>
			<!-- Specifies the strongly-typed resource class visibility. It only accepts Internal and Public. -->
			<StrClassVisibility>Internal</StrClassVisibility>
			<!-- 
				Specifies the base loading directory for file references , upcoming in V2. 
				Can be also null to indicate that all paths must be always absolute.
			-->
			<BaseLoadingDirectory></BaseLoadingDirectory>
		</GeneratableResource>
		<!-- [PUBLIC BUILD ITEM] Specifies the target transformed file definition. -->
		<!-- Through this item you specify from which files the result will be produced , where it will be saved and under which format will be saved. -->
		<OutputResourceFileDef>
			<!-- Specifies the format of this resource file. Allowed values: Resources, CustomBinary, JSON. By default it is set to Resources. -->
			<OutputType>Resources</OutputType>
			<!-- 
				  Specifies the input paths which the final file will contain their resources. 
				  This must contain paths specified in the GeneratableResource item definition.
				  The paths are seperated by using the semi-colon (;) character.
			-->
			<Inputs></Inputs>
		</OutputResourceFileDef>
	</ItemDefinitionGroup>

	<!-- Import the MSBuild tasks -->
	<UsingTask TaskName="DotNetResourcesExtensions.BuildTasks.DotNetResExtGenerator" AssemblyFile="$(DNRSPath)" />
	<!-- Required for resolving the dependencies required by the DotNetResExtGenerator -->
	<UsingTask TaskName="DotNetResourcesExtensions.BuildTasks.DependenciesResolver" AssemblyFile="$(DNRSPath)" />

	<!-- [PUBLIC TARGET] The DotNetResourcesExtensions proposal to GenerateResource task. -->
	<!-- Note that the old properties are deprecated and there is no way to mitigate them , so it throws errors if these properties are defined even. -->
	<!--
		Private Notes: Disable resource generation when any IDE loads the project this can be a very heavy process. 
		The task will be called only for generating the strongly-typed class files.
	-->
	<Target Name="DotNetResourcesExtensions_GenerateResource">
		<Message Importance="normal" Condition="'$(DesignTimeBuild)' != 'true'" Text="Instantiating the Resource Generator." />
		<Error Code="DNTRESEXT0122" Condition="'$(DesignTimeBuild)' != 'true' AND '$(DotNetResourcesExtensions_OutputResFile)' != ''" 
				 Text="The DotNetResourcesExtensions_OutputResFile property is deprecated, create instead a new OutputResourceFileDef item." />
		<Error Code="DNTRESEXT0122" Condition="'$(DesignTimeBuild)' != 'true' AND '$(DotNetResourcesExtensions_OutputType)' != ''"
				 Text="The DotNetResourcesExtensions_OutputType property is deprecated, create instead a new OutputResourceFileDef item." />
		<Error Code="DNTRESEXT0122" Condition="'$(DesignTimeBuild)' != 'true' AND '$(DotNetResourcesExtensions_EmbedResultingFileToBuildResult)' != ''"
				 Text="The DotNetResourcesExtensions_EmbedResultingFileToBuildResult property is deprecated, create instead a new OutputResourceFileDef item." />
		<DotNetResExtGenerator
				InputFiles="@(GeneratableResource)"
				OutputFiles="@(OutputResourceFileDef)"
				IsDTBBuild="$(DesignTimeBuild)"
			/>
		<Message Importance="normal" Condition="'$(DesignTimeBuild)' != 'true'" Text ="Resource Generator ended successfully." />
	</Target>

	<!-- Resolves the dependencies required by the BuildTasks and copies System.Windows.Forms if we are on Windows -->
	<!-- A warning is also emitted if somebody attempts to build a Windows project on non-Windows platforms. -->
	<Target Name="I_DotNetResourcesExtensions_BuildTasks_Resolve" Condition="'$(DotNetResourcesExtensions_EnableDepResolve)' == 'True'">
		<Message Importance="normal" Text="Running dependency resolver." />
		<DependenciesResolver PackageRoot="$(NuGetPackageRoot)" RunningFramework="$(DNRS_TFIdentifier)" EngineRuntimeType="$(MSBuildRuntimeType)" />
		<Message Importance="normal" Text="Dependency resolver successfully installed all required dependencies." />
		<!-- Be noted that the .NET Standard version of DotNetResourcesExtensions does not have support for usual ResX files so this is not needed to be copied out -->
		<Copy SourceFiles="$(WinDir)\Microsoft.NET\Framework64\v4.0.30319\System.Windows.Forms.dll"
			  DestinationFolder="$(MSBuildThisFileDirectory)/../tools/$(DNRS_TFIdentifier)"
			  SkipUnchangedFiles="true" Condition="'$(OS)' == 'Windows_NT' AND '$(DNRS_TFIdentifier)' == 'net472'" />
		<Warning File="DotNetResourcesExtensions.BuildTransitive.targets"
			Condition="('$(DNRS_TFIdentifier)' == 'net472' OR '$(TargetFramework.Contains(`windows`))' == 'true') AND '$(OS)' != 'Windows_NT'" Code="DNTRESEXT0138"
			Text="Attempting to build a Windows project from a non-Windows machine. As a result you might get build errors because the System.Windows.Forms assembly is required if you want to transfer ResX resources!" />
	</Target>

	<!-- The NuGet package is not supported for all target frameworks although that .NET Standard allows that to happen. -->
	<!-- For the unsupported frameworks , throw a build error. -->
	<Target Name="I_DotNetResourcesExtensions_CheckTF">
		<Error Condition="'$(TargetFramework.Contains(`net6.0`))' == 'true' OR '$(TargetFramework.Contains(`netcoreapp`))' == 'true' OR '$(TargetFramework.Contains(`net5.0`))' == 'true'"
			   Code="DNTRESEXT1034" Text="The DotNetResourcesExtensions package is not supported for building apps that use the .NET Core , 5 and 6 versions." />
	</Target>

	<!-- Done! -->
</Project>